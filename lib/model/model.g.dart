// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Tag.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Tag TABLE
class TableTag extends SqfEntityTableBase {
  TableTag() {
    // declare properties of EntityTable
    tableName = 'Tag';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTag();
  }
}

// ContactDetail TABLE
class TableContactDetail extends SqfEntityTableBase {
  TableContactDetail() {
    // declare properties of EntityTable
    tableName = 'ContactDetail';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('phoneContactId', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContactDetail();
  }
}

// ContactNote TABLE
class TableContactNote extends SqfEntityTableBase {
  TableContactNote() {
    // declare properties of EntityTable
    tableName = 'ContactNote';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('note', DbType.text),
      SqfEntityFieldBase('date', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldRelationshipBase(
          TableContactDetail.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'ContactDetailId'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContactNote();
  }
}

// ContactRelation TABLE
class TableContactRelation extends SqfEntityTableBase {
  TableContactRelation() {
    // declare properties of EntityTable
    tableName = 'ContactRelation';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('from', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('to', DbType.integer, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContactRelation();
  }
}

// ContactDetailTag TABLE
class TableContactDetailTag extends SqfEntityTableBase {
  TableContactDetailTag() {
    // declare properties of EntityTable
    tableName = 'ContactDetailTag';
    relationType = RelationType.MANY_TO_MANY;
    primaryKeyName = '';
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableTag.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'TagId',
          isPrimaryKeyField: true),
      SqfEntityFieldRelationshipBase(
          TableContactDetail.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'ContactDetailId',
          isPrimaryKeyField: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContactDetailTag();
  }
}
// END TABLES

// BEGIN SEQUENCES
// END SEQUENCES

// BEGIN DATABASE MODEL
class Connect2DB extends SqfEntityModelProvider {
  Connect2DB() {
    databaseName = connect2DatabaseModel.databaseName;
    password = connect2DatabaseModel.password;
    dbVersion = connect2DatabaseModel.dbVersion;
    preSaveAction = connect2DatabaseModel.preSaveAction;
    logFunction = connect2DatabaseModel.logFunction;
    databaseTables = [
      TableTag.getInstance,
      TableContactDetail.getInstance,
      TableContactNote.getInstance,
      TableContactRelation.getInstance,
      TableContactDetailTag.getInstance,
    ];

    bundledDatabasePath = connect2DatabaseModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = connect2DatabaseModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Tag
class Tag extends TableBase {
  Tag({this.id, this.name}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Tag.withFields(this.name) {
    _setDefaultValues();
  }
  Tag.withId(this.id, this.name) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Tag.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
  }
  // FIELDS (Tag)
  int? id;
  String? name;

  // end FIELDS (Tag)

// COLLECTIONS & VIRTUALS (Tag)
  ///(RelationType.MANY_TO_MANY) (ContactDetailTag) to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContactDetails', 'plField2'..]) or so on..
  List<ContactDetail>? plContactDetails;

  /// get ContactDetail(s) filtered by ContactDetailId IN ContactDetailTag
  ContactDetailFilterBuilder? getContactDetails(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactDetail()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .where(
            'id IN (SELECT ContactDetailId FROM ContactDetailTag WHERE TagId=?)',
            parameterValue: id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Tag)

  static const bool _softDeleteActivated = false;
  TagManager? __mnTag;

  TagManager get _mnTag {
    return __mnTag = __mnTag ?? TagManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }

// COLLECTIONS (Tag)
    if (!forQuery) {
      map['ContactDetails'] = await getContactDetails()!.toMapList();
    }
// END COLLECTIONS (Tag)

    return map;
  }

  /// This method returns Json String [Tag]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tag]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name];
  }

  static Future<List<Tag>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tag.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Tag>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tag>[];
    try {
      objList =
          list.map((tag) => Tag.fromMap(tag as Map<String, dynamic>)).toList();
    } catch (e) {
      debugPrint('SQFENTITY ERROR Tag.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tag>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tag> objList = <Tag>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tag.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Tag.plContactDetails') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContactDetails'))) {
          /*_loadedfields!.add('Tag.plContactDetails'); */ obj
                  .plContactDetails =
              obj.plContactDetails ??
                  await obj.getContactDetails()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tag by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Tag] if exist, otherwise returns null
  Future<Tag?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Tag? obj;
    final data = await _mnTag.getById([id]);
    if (data.length != 0) {
      obj = Tag.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Tag.plContactDetails') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContactDetails'))) {
          /*_loadedfields!.add('Tag.plContactDetails'); */ obj
                  .plContactDetails =
              obj.plContactDetails ??
                  await obj.getContactDetails()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tag) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTag.insert(this, ignoreBatch);
    } else {
      await _mnTag.update(this);
    }

    return id;
  }

  /// Saves the (Tag) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTag.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTag.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Tag. Returns a new Primary Key value of Tag

  /// <returns>Returns a new Primary Key value of Tag
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Tag> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tag> tags,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in tags) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < tags.length; i++) {
        if (tags[i].id == null) {
          tags[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTag.rawInsert(
          'INSERT OR REPLACE INTO Tag (id, name)  VALUES (?,?)',
          [id, name],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Tag id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Tag id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tag Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Tag>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Tag> tags,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTag.rawInsertAll(
        'INSERT OR REPLACE INTO Tag (id, name)  VALUES (?,?)', tags,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Tag

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Tag invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTag
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTag.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Tag] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  TagFilterBuilder select({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TagFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TagFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TagFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tag

// region TagField
class TagField extends FilterBase {
  TagField(TagFilterBuilder tagFB) : super(tagFB);

  @override
  TagFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder isNull() {
    return super.isNull() as TagFilterBuilder;
  }

  @override
  TagFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TagFilterBuilder;
  }

  @override
  TagField get not {
    return super.not as TagField;
  }
}
// endregion TagField

// region TagFilterBuilder
class TagFilterBuilder extends ConjunctionBase {
  TagFilterBuilder(Tag obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnTag = obj._mnTag;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TagManager? _mnTag;

  /// put the sql keyword 'AND'
  @override
  TagFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TagFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TagFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TagFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TagFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TagFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TagFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TagFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TagFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TagFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TagFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TagField _setField(TagField? field, String colName, DbType dbtype) {
    return TagField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TagField? _id;
  TagField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TagField? _name;
  TagField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  /// Deletes List<Tag> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTag!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTag!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from Tag ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTag!.updateBatch(qparams, values);
  }

  /// This method always returns [Tag] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tag?
  @override
  Future<Tag?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTag!.toList(qparams);
    final data = await objFuture;
    Tag? obj;
    if (data.isNotEmpty) {
      obj = Tag.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Tag.plContactDetails') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContactDetails'))) {
          /*_loadedfields!.add('Tag.plContactDetails'); */ obj
                  .plContactDetails =
              obj.plContactDetails ??
                  await obj.getContactDetails()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Tag]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tag?
  @override
  Future<Tag> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Tag();
  }

  /// This method returns int. [Tag]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tagCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tagsFuture = await _mnTag!.toList(qparams);
    final int count = tagsFuture[0]['CNT'] as int;
    if (tagCount != null) {
      tagCount(count);
    }
    return count;
  }

  /// This method returns List<Tag> [Tag]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Tag>
  @override
  Future<List<Tag>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Tag> tagsData = await Tag.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tagsData;
  }

  /// This method returns Json String [Tag]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tag]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tag]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTag!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tag]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM Tag WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTag!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tag]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTag!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Tag.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTag!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TagFilterBuilder

// region TagFields
class TagFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }
}
// endregion TagFields

//region TagManager
class TagManager extends SqfEntityProvider {
  TagManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'Tag';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TagManager
// region ContactDetail
class ContactDetail extends TableBase {
  ContactDetail({this.id, this.phoneContactId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  ContactDetail.withFields(this.phoneContactId) {
    _setDefaultValues();
  }
  ContactDetail.withId(this.id, this.phoneContactId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  ContactDetail.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['phoneContactId'] != null) {
      phoneContactId = o['phoneContactId'].toString();
    }
  }
  // FIELDS (ContactDetail)
  int? id;
  String? phoneContactId;

  // end FIELDS (ContactDetail)

// COLLECTIONS & VIRTUALS (ContactDetail)
  ///(RelationType.MANY_TO_MANY) (ContactDetailTag) to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTags', 'plField2'..]) or so on..
  List<Tag>? plTags;

  /// get Tag(s) filtered by TagId IN ContactDetailTag
  TagFilterBuilder? getTags(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Tag()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .where(
            'id IN (SELECT TagId FROM ContactDetailTag WHERE ContactDetailId=?)',
            parameterValue: id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContactNotes', 'plField2'..]) or so on..
  List<ContactNote>? plContactNotes;

  /// get ContactNote(s) filtered by id=ContactDetailId
  ContactNoteFilterBuilder? getContactNotes(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return ContactNote()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .ContactDetailId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (ContactDetail)

  static const bool _softDeleteActivated = false;
  ContactDetailManager? __mnContactDetail;

  ContactDetailManager get _mnContactDetail {
    return __mnContactDetail = __mnContactDetail ?? ContactDetailManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (phoneContactId != null || !forView) {
      map['phoneContactId'] = phoneContactId;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (phoneContactId != null || !forView) {
      map['phoneContactId'] = phoneContactId;
    }

// COLLECTIONS (ContactDetail)
    if (!forQuery) {
      map['Tags'] = await getTags()!.toMapList();
    }
    if (!forQuery) {
      map['ContactNotes'] = await getContactNotes()!.toMapList();
    }
// END COLLECTIONS (ContactDetail)

    return map;
  }

  /// This method returns Json String [ContactDetail]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ContactDetail]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [phoneContactId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, phoneContactId];
  }

  static Future<List<ContactDetail>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR ContactDetail.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<ContactDetail>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ContactDetail>[];
    try {
      objList = list
          .map((contactdetail) =>
              ContactDetail.fromMap(contactdetail as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR ContactDetail.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ContactDetail>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<ContactDetail> objList = <ContactDetail>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ContactDetail.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('ContactDetail.plTags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTags'))) {
          /*_loadedfields!.add('ContactDetail.plTags'); */ obj.plTags =
              obj.plTags ??
                  await obj.getTags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('ContactDetail.plContactNotes') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContactNotes'))) {
          /*_loadedfields!.add('ContactDetail.plContactNotes'); */ obj
                  .plContactNotes =
              obj.plContactNotes ??
                  await obj.getContactNotes()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns ContactDetail by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [ContactDetail] if exist, otherwise returns null
  Future<ContactDetail?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    ContactDetail? obj;
    final data = await _mnContactDetail.getById([id]);
    if (data.length != 0) {
      obj = ContactDetail.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('ContactDetail.plTags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTags'))) {
          /*_loadedfields!.add('ContactDetail.plTags'); */ obj.plTags =
              obj.plTags ??
                  await obj.getTags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('ContactDetail.plContactNotes') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContactNotes'))) {
          /*_loadedfields!.add('ContactDetail.plContactNotes'); */ obj
                  .plContactNotes =
              obj.plContactNotes ??
                  await obj.getContactNotes()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ContactDetail) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContactDetail.insert(this, ignoreBatch);
    } else {
      await _mnContactDetail.update(this);
    }

    return id;
  }

  /// Saves the (ContactDetail) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContactDetail.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnContactDetail.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs ContactDetail. Returns a new Primary Key value of ContactDetail

  /// <returns>Returns a new Primary Key value of ContactDetail
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<ContactDetail> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<ContactDetail> contactdetails,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in contactdetails) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < contactdetails.length; i++) {
        if (contactdetails[i].id == null) {
          contactdetails[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContactDetail.rawInsert(
          'INSERT OR REPLACE INTO ContactDetail (id, phoneContactId)  VALUES (?,?)',
          [id, phoneContactId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'ContactDetail id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'ContactDetail id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'ContactDetail Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<ContactDetail>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<ContactDetail> contactdetails,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnContactDetail.rawInsertAll(
        'INSERT OR REPLACE INTO ContactDetail (id, phoneContactId)  VALUES (?,?)',
        contactdetails,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes ContactDetail

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete ContactDetail invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await ContactNote()
          .select()
          .ContactDetailId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnContactDetail
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnContactDetail.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [ContactDetail] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ContactDetailFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactDetailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ContactDetailFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactDetailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion contactdetail

// region ContactDetailField
class ContactDetailField extends FilterBase {
  ContactDetailField(ContactDetailFilterBuilder contactdetailFB)
      : super(contactdetailFB);

  @override
  ContactDetailFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder isNull() {
    return super.isNull() as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ContactDetailFilterBuilder;
  }

  @override
  ContactDetailField get not {
    return super.not as ContactDetailField;
  }
}
// endregion ContactDetailField

// region ContactDetailFilterBuilder
class ContactDetailFilterBuilder extends ConjunctionBase {
  ContactDetailFilterBuilder(ContactDetail obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContactDetail = obj._mnContactDetail;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ContactDetailManager? _mnContactDetail;

  /// put the sql keyword 'AND'
  @override
  ContactDetailFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ContactDetailFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ContactDetailFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ContactDetailFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ContactDetailFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ContactDetailFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ContactDetailFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactDetailFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactDetailFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactDetailFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactDetailFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ContactDetailField _setField(
      ContactDetailField? field, String colName, DbType dbtype) {
    return ContactDetailField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ContactDetailField? _id;
  ContactDetailField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ContactDetailField? _phoneContactId;
  ContactDetailField get phoneContactId {
    return _phoneContactId =
        _setField(_phoneContactId, 'phoneContactId', DbType.text);
  }

  /// Deletes List<ContactDetail> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (ContactNote) according to DeleteRule.CASCADE
    final idListContactNoteBYContactDetailId = toListPrimaryKeySQL(false);
    final resContactNoteBYContactDetailId = await ContactNote()
        .select()
        .where(
            'ContactDetailId IN (${idListContactNoteBYContactDetailId['sql']})',
            parameterValue: idListContactNoteBYContactDetailId['args'])
        .delete(hardDelete);
    if (!resContactNoteBYContactDetailId.success) {
      return resContactNoteBYContactDetailId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContactDetail!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContactDetail!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from ContactDetail ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContactDetail!.updateBatch(qparams, values);
  }

  /// This method always returns [ContactDetail] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ContactDetail?
  @override
  Future<ContactDetail?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContactDetail!.toList(qparams);
    final data = await objFuture;
    ContactDetail? obj;
    if (data.isNotEmpty) {
      obj = ContactDetail.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('ContactDetail.plTags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTags'))) {
          /*_loadedfields!.add('ContactDetail.plTags'); */ obj.plTags =
              obj.plTags ??
                  await obj.getTags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('ContactDetail.plContactNotes') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContactNotes'))) {
          /*_loadedfields!.add('ContactDetail.plContactNotes'); */ obj
                  .plContactNotes =
              obj.plContactNotes ??
                  await obj.getContactNotes()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [ContactDetail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ContactDetail?
  @override
  Future<ContactDetail> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        ContactDetail();
  }

  /// This method returns int. [ContactDetail]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? contactdetailCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final contactdetailsFuture = await _mnContactDetail!.toList(qparams);
    final int count = contactdetailsFuture[0]['CNT'] as int;
    if (contactdetailCount != null) {
      contactdetailCount(count);
    }
    return count;
  }

  /// This method returns List<ContactDetail> [ContactDetail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<ContactDetail>
  @override
  Future<List<ContactDetail>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<ContactDetail> contactdetailsData =
        await ContactDetail.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return contactdetailsData;
  }

  /// This method returns Json String [ContactDetail]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ContactDetail]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ContactDetail]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContactDetail!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ContactDetail]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM ContactDetail WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnContactDetail!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ContactDetail]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContactDetail!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await ContactDetail.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContactDetail!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ContactDetailFilterBuilder

// region ContactDetailFields
class ContactDetailFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fPhoneContactId;
  static TableField get phoneContactId {
    return _fPhoneContactId = _fPhoneContactId ??
        SqlSyntax.setField(_fPhoneContactId, 'phoneContactId', DbType.text);
  }
}
// endregion ContactDetailFields

//region ContactDetailManager
class ContactDetailManager extends SqfEntityProvider {
  ContactDetailManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'ContactDetail';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ContactDetailManager
// region ContactNote
class ContactNote extends TableBase {
  ContactNote({this.id, this.note, this.date, this.ContactDetailId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  ContactNote.withFields(this.note, this.date, this.ContactDetailId) {
    _setDefaultValues();
  }
  ContactNote.withId(this.id, this.note, this.date, this.ContactDetailId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  ContactNote.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['note'] != null) {
      note = o['note'].toString();
    }
    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['date'].toString())!)
          : DateTime.tryParse(o['date'].toString());
    }
    ContactDetailId = int.tryParse(o['ContactDetailId'].toString());

    // RELATIONSHIPS FromMAP
    plContactDetail = o['contactDetail'] != null
        ? ContactDetail.fromMap(o['contactDetail'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (ContactNote)
  int? id;
  String? note;
  DateTime? date;
  int? ContactDetailId;

  // end FIELDS (ContactNote)

// RELATIONSHIPS (ContactNote)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContactDetail', 'plField2'..]) or so on..
  ContactDetail? plContactDetail;

  /// get ContactDetail By ContactDetailId
  Future<ContactDetail?> getContactDetail(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await ContactDetail().getById(ContactDetailId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (ContactNote)

  static const bool _softDeleteActivated = false;
  ContactNoteManager? __mnContactNote;

  ContactNoteManager get _mnContactNote {
    return __mnContactNote = __mnContactNote ?? ContactNoteManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (note != null || !forView) {
      map['note'] = note;
    }
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (ContactDetailId != null) {
      map['ContactDetailId'] = forView
          ? plContactDetail == null
              ? ContactDetailId
              : plContactDetail!.phoneContactId
          : ContactDetailId;
    } else if (ContactDetailId != null || !forView) {
      map['ContactDetailId'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (note != null || !forView) {
      map['note'] = note;
    }
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (ContactDetailId != null) {
      map['ContactDetailId'] = forView
          ? plContactDetail == null
              ? ContactDetailId
              : plContactDetail!.phoneContactId
          : ContactDetailId;
    } else if (ContactDetailId != null || !forView) {
      map['ContactDetailId'] = null;
    }

    return map;
  }

  /// This method returns Json String [ContactNote]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ContactNote]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      note,
      date != null ? date!.millisecondsSinceEpoch : null,
      ContactDetailId
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      note,
      date != null ? date!.millisecondsSinceEpoch : null,
      ContactDetailId
    ];
  }

  static Future<List<ContactNote>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR ContactNote.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<ContactNote>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ContactNote>[];
    try {
      objList = list
          .map((contactnote) =>
              ContactNote.fromMap(contactnote as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR ContactNote.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ContactNote>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<ContactNote> objList = <ContactNote>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ContactNote.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContactDetail'))) {
          obj.plContactDetail = obj.plContactDetail ??
              await obj.getContactDetail(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns ContactNote by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [ContactNote] if exist, otherwise returns null
  Future<ContactNote?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    ContactNote? obj;
    final data = await _mnContactNote.getById([id]);
    if (data.length != 0) {
      obj = ContactNote.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContactDetail'))) {
          obj.plContactDetail = obj.plContactDetail ??
              await obj.getContactDetail(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ContactNote) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContactNote.insert(this, ignoreBatch);
    } else {
      await _mnContactNote.update(this);
    }

    return id;
  }

  /// Saves the (ContactNote) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContactNote.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnContactNote.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs ContactNote. Returns a new Primary Key value of ContactNote

  /// <returns>Returns a new Primary Key value of ContactNote
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<ContactNote> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<ContactNote> contactnotes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in contactnotes) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < contactnotes.length; i++) {
        if (contactnotes[i].id == null) {
          contactnotes[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContactNote.rawInsert(
          'INSERT OR REPLACE INTO ContactNote (id, note, date, ContactDetailId)  VALUES (?,?,?,?)',
          [
            id,
            note,
            date != null ? date!.millisecondsSinceEpoch : null,
            ContactDetailId
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'ContactNote id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'ContactNote id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'ContactNote Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<ContactNote>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<ContactNote> contactnotes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnContactNote.rawInsertAll(
        'INSERT OR REPLACE INTO ContactNote (id, note, date, ContactDetailId)  VALUES (?,?,?,?)',
        contactnotes,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes ContactNote

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete ContactNote invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnContactNote
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnContactNote.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [ContactNote] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ContactNoteFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactNoteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ContactNoteFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactNoteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion contactnote

// region ContactNoteField
class ContactNoteField extends FilterBase {
  ContactNoteField(ContactNoteFilterBuilder contactnoteFB)
      : super(contactnoteFB);

  @override
  ContactNoteFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder isNull() {
    return super.isNull() as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ContactNoteFilterBuilder;
  }

  @override
  ContactNoteField get not {
    return super.not as ContactNoteField;
  }
}
// endregion ContactNoteField

// region ContactNoteFilterBuilder
class ContactNoteFilterBuilder extends ConjunctionBase {
  ContactNoteFilterBuilder(ContactNote obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContactNote = obj._mnContactNote;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ContactNoteManager? _mnContactNote;

  /// put the sql keyword 'AND'
  @override
  ContactNoteFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ContactNoteFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ContactNoteFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ContactNoteFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ContactNoteFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ContactNoteFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ContactNoteFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactNoteFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactNoteFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactNoteFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactNoteFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ContactNoteField _setField(
      ContactNoteField? field, String colName, DbType dbtype) {
    return ContactNoteField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ContactNoteField? _id;
  ContactNoteField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ContactNoteField? _note;
  ContactNoteField get note {
    return _note = _setField(_note, 'note', DbType.text);
  }

  ContactNoteField? _date;
  ContactNoteField get date {
    return _date = _setField(_date, 'date', DbType.datetime);
  }

  ContactNoteField? _ContactDetailId;
  ContactNoteField get ContactDetailId {
    return _ContactDetailId =
        _setField(_ContactDetailId, 'ContactDetailId', DbType.integer);
  }

  /// Deletes List<ContactNote> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContactNote!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContactNote!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from ContactNote ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContactNote!.updateBatch(qparams, values);
  }

  /// This method always returns [ContactNote] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ContactNote?
  @override
  Future<ContactNote?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContactNote!.toList(qparams);
    final data = await objFuture;
    ContactNote? obj;
    if (data.isNotEmpty) {
      obj = ContactNote.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContactDetail'))) {
          obj.plContactDetail = obj.plContactDetail ??
              await obj.getContactDetail(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [ContactNote]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ContactNote?
  @override
  Future<ContactNote> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        ContactNote();
  }

  /// This method returns int. [ContactNote]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? contactnoteCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final contactnotesFuture = await _mnContactNote!.toList(qparams);
    final int count = contactnotesFuture[0]['CNT'] as int;
    if (contactnoteCount != null) {
      contactnoteCount(count);
    }
    return count;
  }

  /// This method returns List<ContactNote> [ContactNote]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<ContactNote>
  @override
  Future<List<ContactNote>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<ContactNote> contactnotesData = await ContactNote.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return contactnotesData;
  }

  /// This method returns Json String [ContactNote]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ContactNote]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ContactNote]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContactNote!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ContactNote]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM ContactNote WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnContactNote!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ContactNote]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContactNote!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await ContactNote.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContactNote!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ContactNoteFilterBuilder

// region ContactNoteFields
class ContactNoteFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fNote;
  static TableField get note {
    return _fNote = _fNote ?? SqlSyntax.setField(_fNote, 'note', DbType.text);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate =
        _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.datetime);
  }

  static TableField? _fContactDetailId;
  static TableField get ContactDetailId {
    return _fContactDetailId = _fContactDetailId ??
        SqlSyntax.setField(
            _fContactDetailId, 'ContactDetailId', DbType.integer);
  }
}
// endregion ContactNoteFields

//region ContactNoteManager
class ContactNoteManager extends SqfEntityProvider {
  ContactNoteManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'ContactNote';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ContactNoteManager
// region ContactRelation
class ContactRelation extends TableBase {
  ContactRelation({this.id, this.name, this.from, this.to}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  ContactRelation.withFields(this.name, this.from, this.to) {
    _setDefaultValues();
  }
  ContactRelation.withId(this.id, this.name, this.from, this.to) {
    _setDefaultValues();
  }
  // fromMap v2.0
  ContactRelation.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['from'] != null) {
      from = int.tryParse(o['from'].toString());
    }
    if (o['to'] != null) {
      to = int.tryParse(o['to'].toString());
    }
  }
  // FIELDS (ContactRelation)
  int? id;
  String? name;
  int? from;
  int? to;

  // end FIELDS (ContactRelation)

  static const bool _softDeleteActivated = false;
  ContactRelationManager? __mnContactRelation;

  ContactRelationManager get _mnContactRelation {
    return __mnContactRelation =
        __mnContactRelation ?? ContactRelationManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (from != null || !forView) {
      map['from'] = from;
    }
    if (to != null || !forView) {
      map['to'] = to;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (from != null || !forView) {
      map['from'] = from;
    }
    if (to != null || !forView) {
      map['to'] = to;
    }

    return map;
  }

  /// This method returns Json String [ContactRelation]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ContactRelation]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, from, to];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, from, to];
  }

  static Future<List<ContactRelation>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR ContactRelation.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<ContactRelation>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ContactRelation>[];
    try {
      objList = list
          .map((contactrelation) =>
              ContactRelation.fromMap(contactrelation as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR ContactRelation.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ContactRelation>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<ContactRelation> objList = <ContactRelation>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ContactRelation.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns ContactRelation by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [ContactRelation] if exist, otherwise returns null
  Future<ContactRelation?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    ContactRelation? obj;
    final data = await _mnContactRelation.getById([id]);
    if (data.length != 0) {
      obj = ContactRelation.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ContactRelation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContactRelation.insert(this, ignoreBatch);
    } else {
      await _mnContactRelation.update(this);
    }

    return id;
  }

  /// Saves the (ContactRelation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContactRelation.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnContactRelation.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs ContactRelation. Returns a new Primary Key value of ContactRelation

  /// <returns>Returns a new Primary Key value of ContactRelation
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<ContactRelation> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<ContactRelation> contactrelations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in contactrelations) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < contactrelations.length; i++) {
        if (contactrelations[i].id == null) {
          contactrelations[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContactRelation.rawInsert(
          'INSERT OR REPLACE INTO ContactRelation (id, name, from, to)  VALUES (?,?,?,?)',
          [id, name, from, to],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'ContactRelation id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'ContactRelation id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'ContactRelation Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<ContactRelation>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<ContactRelation> contactrelations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnContactRelation.rawInsertAll(
        'INSERT OR REPLACE INTO ContactRelation (id, name, from, to)  VALUES (?,?,?,?)',
        contactrelations,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes ContactRelation

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete ContactRelation invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnContactRelation
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnContactRelation.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [ContactRelation] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ContactRelationFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactRelationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ContactRelationFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactRelationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion contactrelation

// region ContactRelationField
class ContactRelationField extends FilterBase {
  ContactRelationField(ContactRelationFilterBuilder contactrelationFB)
      : super(contactrelationFB);

  @override
  ContactRelationFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder isNull() {
    return super.isNull() as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ContactRelationFilterBuilder;
  }

  @override
  ContactRelationField get not {
    return super.not as ContactRelationField;
  }
}
// endregion ContactRelationField

// region ContactRelationFilterBuilder
class ContactRelationFilterBuilder extends ConjunctionBase {
  ContactRelationFilterBuilder(ContactRelation obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContactRelation = obj._mnContactRelation;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ContactRelationManager? _mnContactRelation;

  /// put the sql keyword 'AND'
  @override
  ContactRelationFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ContactRelationFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ContactRelationFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ContactRelationFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ContactRelationFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ContactRelationFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ContactRelationFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactRelationFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactRelationFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactRelationFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactRelationFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ContactRelationField _setField(
      ContactRelationField? field, String colName, DbType dbtype) {
    return ContactRelationField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ContactRelationField? _id;
  ContactRelationField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ContactRelationField? _name;
  ContactRelationField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  ContactRelationField? _from;
  ContactRelationField get from {
    return _from = _setField(_from, 'from', DbType.integer);
  }

  ContactRelationField? _to;
  ContactRelationField get to {
    return _to = _setField(_to, 'to', DbType.integer);
  }

  /// Deletes List<ContactRelation> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContactRelation!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContactRelation!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from ContactRelation ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContactRelation!.updateBatch(qparams, values);
  }

  /// This method always returns [ContactRelation] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ContactRelation?
  @override
  Future<ContactRelation?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContactRelation!.toList(qparams);
    final data = await objFuture;
    ContactRelation? obj;
    if (data.isNotEmpty) {
      obj = ContactRelation.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [ContactRelation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ContactRelation?
  @override
  Future<ContactRelation> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        ContactRelation();
  }

  /// This method returns int. [ContactRelation]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? contactrelationCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final contactrelationsFuture = await _mnContactRelation!.toList(qparams);
    final int count = contactrelationsFuture[0]['CNT'] as int;
    if (contactrelationCount != null) {
      contactrelationCount(count);
    }
    return count;
  }

  /// This method returns List<ContactRelation> [ContactRelation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<ContactRelation>
  @override
  Future<List<ContactRelation>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<ContactRelation> contactrelationsData =
        await ContactRelation.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return contactrelationsData;
  }

  /// This method returns Json String [ContactRelation]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ContactRelation]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ContactRelation]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContactRelation!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ContactRelation]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM ContactRelation WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnContactRelation!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ContactRelation]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContactRelation!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await ContactRelation.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContactRelation!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ContactRelationFilterBuilder

// region ContactRelationFields
class ContactRelationFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fFrom;
  static TableField get from {
    return _fFrom =
        _fFrom ?? SqlSyntax.setField(_fFrom, 'from', DbType.integer);
  }

  static TableField? _fTo;
  static TableField get to {
    return _fTo = _fTo ?? SqlSyntax.setField(_fTo, 'to', DbType.integer);
  }
}
// endregion ContactRelationFields

//region ContactRelationManager
class ContactRelationManager extends SqfEntityProvider {
  ContactRelationManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'ContactRelation';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ContactRelationManager
// region ContactDetailTag
class ContactDetailTag extends TableBase {
  ContactDetailTag({this.TagId, this.ContactDetailId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  ContactDetailTag.withFields(this.TagId, this.ContactDetailId) {
    _setDefaultValues();
  }
  ContactDetailTag.withId(this.TagId, this.ContactDetailId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  ContactDetailTag.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    TagId = int.tryParse(o['TagId'].toString());

    ContactDetailId = int.tryParse(o['ContactDetailId'].toString());

    // RELATIONSHIPS FromMAP
    plTag =
        o['tag'] != null ? Tag.fromMap(o['tag'] as Map<String, dynamic>) : null;
    plContactDetail = o['contactDetail'] != null
        ? ContactDetail.fromMap(o['contactDetail'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (ContactDetailTag)
  int? TagId;
  int? ContactDetailId;
  bool? isSaved;
  // end FIELDS (ContactDetailTag)

// RELATIONSHIPS (ContactDetailTag)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTag', 'plField2'..]) or so on..
  Tag? plTag;

  /// get Tag By TagId
  Future<Tag?> getTag(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Tag()
        .getById(TagId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContactDetail', 'plField2'..]) or so on..
  ContactDetail? plContactDetail;

  /// get ContactDetail By ContactDetailId
  Future<ContactDetail?> getContactDetail(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await ContactDetail().getById(ContactDetailId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (ContactDetailTag)

  static const bool _softDeleteActivated = false;
  ContactDetailTagManager? __mnContactDetailTag;

  ContactDetailTagManager get _mnContactDetailTag {
    return __mnContactDetailTag =
        __mnContactDetailTag ?? ContactDetailTagManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (TagId != null) {
      map['TagId'] = forView
          ? plTag == null
              ? TagId
              : plTag!.name
          : TagId;
    } else if (TagId != null || !forView) {
      map['TagId'] = null;
    }
    if (ContactDetailId != null) {
      map['ContactDetailId'] = forView
          ? plContactDetail == null
              ? ContactDetailId
              : plContactDetail!.phoneContactId
          : ContactDetailId;
    } else if (ContactDetailId != null || !forView) {
      map['ContactDetailId'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (TagId != null) {
      map['TagId'] = forView
          ? plTag == null
              ? TagId
              : plTag!.name
          : TagId;
    } else if (TagId != null || !forView) {
      map['TagId'] = null;
    }
    if (ContactDetailId != null) {
      map['ContactDetailId'] = forView
          ? plContactDetail == null
              ? ContactDetailId
              : plContactDetail!.phoneContactId
          : ContactDetailId;
    } else if (ContactDetailId != null || !forView) {
      map['ContactDetailId'] = null;
    }

    return map;
  }

  /// This method returns Json String [ContactDetailTag]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [ContactDetailTag]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [TagId, ContactDetailId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [TagId, ContactDetailId];
  }

  static Future<List<ContactDetailTag>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR ContactDetailTag.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<ContactDetailTag>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <ContactDetailTag>[];
    try {
      objList = list
          .map((contactdetailtag) => ContactDetailTag.fromMap(
              contactdetailtag as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR ContactDetailTag.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<ContactDetailTag>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<ContactDetailTag> objList = <ContactDetailTag>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = ContactDetailTag.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTag'))) {
          obj.plTag = obj.plTag ?? await obj.getTag(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContactDetail'))) {
          obj.plContactDetail = obj.plContactDetail ??
              await obj.getContactDetail(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns ContactDetailTag by ID if exist, otherwise returns null
  /// Primary Keys: int? TagId, int? ContactDetailId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [ContactDetailTag] if exist, otherwise returns null
  Future<ContactDetailTag?> getById(int? TagId, int? ContactDetailId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (TagId == null) {
      return null;
    }
    ContactDetailTag? obj;
    final data = await _mnContactDetailTag.getById([TagId, ContactDetailId]);
    if (data.length != 0) {
      obj = ContactDetailTag.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTag'))) {
          obj.plTag = obj.plTag ?? await obj.getTag(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContactDetail'))) {
          obj.plContactDetail = obj.plContactDetail ??
              await obj.getContactDetail(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (ContactDetailTag) object. If the Primary Key (TagId) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same TagId
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnContactDetailTag.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO ContactDetailTag ( TagId, ContactDetailId)  VALUES (?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<ContactDetailTag> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<ContactDetailTag> contactdetailtags,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in contactdetailtags) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContactDetailTag.rawInsert(
          'INSERT OR REPLACE INTO ContactDetailTag ( TagId, ContactDetailId)  VALUES (?,?)',
          [TagId, ContactDetailId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'ContactDetailTag TagId=$TagId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'ContactDetailTag TagId=$TagId did not update');
      }
      return TagId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'ContactDetailTag Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<ContactDetailTag>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<ContactDetailTag> contactdetailtags,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnContactDetailTag.rawInsertAll(
        'INSERT OR REPLACE INTO ContactDetailTag ( TagId, ContactDetailId)  VALUES (?,?)',
        contactdetailtags,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes ContactDetailTag

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete ContactDetailTag invoked (TagId=$TagId)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnContactDetailTag.delete(QueryParams(
          whereString: 'TagId=? AND ContactDetailId=?',
          whereArguments: [TagId, ContactDetailId]));
    } else {
      return _mnContactDetailTag.updateBatch(
          QueryParams(
              whereString: 'TagId=? AND ContactDetailId=?',
              whereArguments: [TagId, ContactDetailId]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [ContactDetailTag] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ContactDetailTagFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactDetailTagFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ContactDetailTagFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContactDetailTagFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      TagId = null;
      ContactDetailId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion contactdetailtag

// region ContactDetailTagField
class ContactDetailTagField extends FilterBase {
  ContactDetailTagField(ContactDetailTagFilterBuilder contactdetailtagFB)
      : super(contactdetailtagFB);

  @override
  ContactDetailTagFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder isNull() {
    return super.isNull() as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ContactDetailTagFilterBuilder;
  }

  @override
  ContactDetailTagField get not {
    return super.not as ContactDetailTagField;
  }
}
// endregion ContactDetailTagField

// region ContactDetailTagFilterBuilder
class ContactDetailTagFilterBuilder extends ConjunctionBase {
  ContactDetailTagFilterBuilder(ContactDetailTag obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContactDetailTag = obj._mnContactDetailTag;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ContactDetailTagManager? _mnContactDetailTag;

  /// put the sql keyword 'AND'
  @override
  ContactDetailTagFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ContactDetailTagFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ContactDetailTagFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ContactDetailTagFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ContactDetailTagFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ContactDetailTagFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ContactDetailTagFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactDetailTagFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactDetailTagFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContactDetailTagFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContactDetailTagFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ContactDetailTagField _setField(
      ContactDetailTagField? field, String colName, DbType dbtype) {
    return ContactDetailTagField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ContactDetailTagField? _TagId;
  ContactDetailTagField get TagId {
    return _TagId = _setField(_TagId, 'TagId', DbType.integer);
  }

  ContactDetailTagField? _ContactDetailId;
  ContactDetailTagField get ContactDetailId {
    return _ContactDetailId =
        _setField(_ContactDetailId, 'ContactDetailId', DbType.integer);
  }

  /// Deletes List<ContactDetailTag> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContactDetailTag!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContactDetailTag!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'TagId IN (SELECT TagId from ContactDetailTag ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContactDetailTag!.updateBatch(qparams, values);
  }

  /// This method always returns [ContactDetailTag] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ContactDetailTag?
  @override
  Future<ContactDetailTag?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContactDetailTag!.toList(qparams);
    final data = await objFuture;
    ContactDetailTag? obj;
    if (data.isNotEmpty) {
      obj = ContactDetailTag.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTag'))) {
          obj.plTag = obj.plTag ?? await obj.getTag(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContactDetail'))) {
          obj.plContactDetail = obj.plContactDetail ??
              await obj.getContactDetail(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [ContactDetailTag]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> ContactDetailTag?
  @override
  Future<ContactDetailTag> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        ContactDetailTag();
  }

  /// This method returns int. [ContactDetailTag]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? contactdetailtagCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final contactdetailtagsFuture = await _mnContactDetailTag!.toList(qparams);
    final int count = contactdetailtagsFuture[0]['CNT'] as int;
    if (contactdetailtagCount != null) {
      contactdetailtagCount(count);
    }
    return count;
  }

  /// This method returns List<ContactDetailTag> [ContactDetailTag]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<ContactDetailTag>
  @override
  Future<List<ContactDetailTag>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<ContactDetailTag> contactdetailtagsData =
        await ContactDetailTag.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return contactdetailtagsData;
  }

  /// This method returns Json String [ContactDetailTag]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [ContactDetailTag]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [ContactDetailTag]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContactDetailTag!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [ContactDetailTag]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `TagId`ContactDetailId` FROM ContactDetailTag WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<TagId,ContactDetailId> [ContactDetailTag]
  /// <returns>List<TagId,ContactDetailId>
  @override
  Future<List<ContactDetailTag>> toListPrimaryKey(
      [bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    qparams.selectColumns = ['TagId', 'ContactDetailId'];
    final contactdetailtagFuture = await _mnContactDetailTag!.toList(qparams);
    return await ContactDetailTag.fromMapList(contactdetailtagFuture);
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [ContactDetailTag]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContactDetailTag!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await ContactDetailTag.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContactDetailTag!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ContactDetailTagFilterBuilder

// region ContactDetailTagFields
class ContactDetailTagFields {
  static TableField? _fTagId;
  static TableField get TagId {
    return _fTagId =
        _fTagId ?? SqlSyntax.setField(_fTagId, 'TagId', DbType.integer);
  }

  static TableField? _fContactDetailId;
  static TableField get ContactDetailId {
    return _fContactDetailId = _fContactDetailId ??
        SqlSyntax.setField(
            _fContactDetailId, 'ContactDetailId', DbType.integer);
  }
}
// endregion ContactDetailTagFields

//region ContactDetailTagManager
class ContactDetailTagManager extends SqfEntityProvider {
  ContactDetailTagManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'ContactDetailTag';
  static const List<String> _primaryKeyList = ['TagId', 'ContactDetailId'];
  static const String _whereStr = 'TagId=? AND ContactDetailId=?';
}

//endregion ContactDetailTagManager
class Connect2DBSequenceManager extends SqfEntityProvider {
  Connect2DBSequenceManager() : super(Connect2DB());
}
// END OF ENTITIES
