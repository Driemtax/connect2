// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Tag.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Tag TABLE
class TableTag extends SqfEntityTableBase {
  TableTag() {
    // declare properties of EntityTable
    tableName = 'tag';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTag();
  }
}

// Contact_detail TABLE
class TableContact_detail extends SqfEntityTableBase {
  TableContact_detail() {
    // declare properties of EntityTable
    tableName = 'contact_detail';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('contactId', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContact_detail();
  }
}

// Contact_detail_tag TABLE
class TableContact_detail_tag extends SqfEntityTableBase {
  TableContact_detail_tag() {
    // declare properties of EntityTable
    tableName = 'contact_detail_tag';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableContact_detail.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'contactDetailId'),
      SqfEntityFieldRelationshipBase(TableTag.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'tagId'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContact_detail_tag();
  }
}

// Contact_detail_relation TABLE
class TableContact_detail_relation extends SqfEntityTableBase {
  TableContact_detail_relation() {
    // declare properties of EntityTable
    tableName = 'contact_detail_relation';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('relationName', DbType.text),
      SqfEntityFieldRelationshipBase(
          TableContact_detail.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'contactDetailId1'),
      SqfEntityFieldRelationshipBase(
          TableContact_detail.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'contactDetailId2'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContact_detail_relation();
  }
}
// END TABLES

// BEGIN SEQUENCES
// END SEQUENCES

// BEGIN DATABASE MODEL
class Connect2DB extends SqfEntityModelProvider {
  Connect2DB() {
    databaseName = connect2DatabaseModel.databaseName;
    password = connect2DatabaseModel.password;
    dbVersion = connect2DatabaseModel.dbVersion;
    preSaveAction = connect2DatabaseModel.preSaveAction;
    logFunction = connect2DatabaseModel.logFunction;
    databaseTables = [
      TableTag.getInstance,
      TableContact_detail.getInstance,
      TableContact_detail_tag.getInstance,
      TableContact_detail_relation.getInstance,
    ];

    bundledDatabasePath = connect2DatabaseModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = connect2DatabaseModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Tag
class Tag extends TableBase {
  Tag({this.id, this.name}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Tag.withFields(this.name) {
    _setDefaultValues();
  }
  Tag.withId(this.id, this.name) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Tag.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
  }
  // FIELDS (Tag)
  int? id;
  String? name;

  // end FIELDS (Tag)

// COLLECTIONS & VIRTUALS (Tag)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContact_detail_tags', 'plField2'..]) or so on..
  List<Contact_detail_tag>? plContact_detail_tags;

  /// get Contact_detail_tag(s) filtered by id=tagId
  Contact_detail_tagFilterBuilder? getContact_detail_tags(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Contact_detail_tag()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .tagId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Tag)

  static const bool _softDeleteActivated = false;
  TagManager? __mnTag;

  TagManager get _mnTag {
    return __mnTag = __mnTag ?? TagManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }

// COLLECTIONS (Tag)
    if (!forQuery) {
      map['Contact_detail_tags'] = await getContact_detail_tags()!.toMapList();
    }
// END COLLECTIONS (Tag)

    return map;
  }

  /// This method returns Json String [Tag]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tag]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name];
  }

  static Future<List<Tag>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tag.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Tag>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tag>[];
    try {
      objList =
          list.map((tag) => Tag.fromMap(tag as Map<String, dynamic>)).toList();
    } catch (e) {
      debugPrint('SQFENTITY ERROR Tag.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tag>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tag> objList = <Tag>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tag.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tag.plContact_detail_tags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_tags'))) {
          /*_loadedfields!.add('tag.plContact_detail_tags'); */ obj
                  .plContact_detail_tags =
              obj.plContact_detail_tags ??
                  await obj.getContact_detail_tags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tag by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Tag] if exist, otherwise returns null
  Future<Tag?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Tag? obj;
    final data = await _mnTag.getById([id]);
    if (data.length != 0) {
      obj = Tag.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tag.plContact_detail_tags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_tags'))) {
          /*_loadedfields!.add('tag.plContact_detail_tags'); */ obj
                  .plContact_detail_tags =
              obj.plContact_detail_tags ??
                  await obj.getContact_detail_tags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tag) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTag.insert(this, ignoreBatch);
    } else {
      await _mnTag.update(this);
    }

    return id;
  }

  /// Saves the (Tag) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTag.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTag.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Tag. Returns a new Primary Key value of Tag

  /// <returns>Returns a new Primary Key value of Tag
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Tag> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tag> tags,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in tags) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < tags.length; i++) {
        if (tags[i].id == null) {
          tags[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTag.rawInsert(
          'INSERT OR REPLACE INTO tag (id, name)  VALUES (?,?)',
          [id, name],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Tag id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Tag id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tag Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Tag>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Tag> tags,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTag.rawInsertAll(
        'INSERT OR REPLACE INTO tag (id, name)  VALUES (?,?)', tags,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Tag

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Tag invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Contact_detail_tag()
          .select()
          .tagId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnTag
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTag.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Tag] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  TagFilterBuilder select({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TagFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TagFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TagFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tag

// region TagField
class TagField extends FilterBase {
  TagField(TagFilterBuilder tagFB) : super(tagFB);

  @override
  TagFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder isNull() {
    return super.isNull() as TagFilterBuilder;
  }

  @override
  TagFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TagFilterBuilder;
  }

  @override
  TagFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TagFilterBuilder;
  }

  @override
  TagField get not {
    return super.not as TagField;
  }
}
// endregion TagField

// region TagFilterBuilder
class TagFilterBuilder extends ConjunctionBase {
  TagFilterBuilder(Tag obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnTag = obj._mnTag;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TagManager? _mnTag;

  /// put the sql keyword 'AND'
  @override
  TagFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TagFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TagFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TagFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TagFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TagFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TagFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TagFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TagFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TagFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TagFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TagField _setField(TagField? field, String colName, DbType dbtype) {
    return TagField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TagField? _id;
  TagField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TagField? _name;
  TagField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  /// Deletes List<Tag> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Contact_detail_tag) according to DeleteRule.CASCADE
    final idListContact_detail_tagBYtagId = toListPrimaryKeySQL(false);
    final resContact_detail_tagBYtagId = await Contact_detail_tag()
        .select()
        .where('tagId IN (${idListContact_detail_tagBYtagId['sql']})',
            parameterValue: idListContact_detail_tagBYtagId['args'])
        .delete(hardDelete);
    if (!resContact_detail_tagBYtagId.success) {
      return resContact_detail_tagBYtagId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTag!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTag!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from tag ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTag!.updateBatch(qparams, values);
  }

  /// This method always returns [Tag] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tag?
  @override
  Future<Tag?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTag!.toList(qparams);
    final data = await objFuture;
    Tag? obj;
    if (data.isNotEmpty) {
      obj = Tag.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tag.plContact_detail_tags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_tags'))) {
          /*_loadedfields!.add('tag.plContact_detail_tags'); */ obj
                  .plContact_detail_tags =
              obj.plContact_detail_tags ??
                  await obj.getContact_detail_tags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Tag]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tag?
  @override
  Future<Tag> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Tag();
  }

  /// This method returns int. [Tag]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tagCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tagsFuture = await _mnTag!.toList(qparams);
    final int count = tagsFuture[0]['CNT'] as int;
    if (tagCount != null) {
      tagCount(count);
    }
    return count;
  }

  /// This method returns List<Tag> [Tag]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Tag>
  @override
  Future<List<Tag>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Tag> tagsData = await Tag.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tagsData;
  }

  /// This method returns Json String [Tag]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tag]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tag]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTag!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tag]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM tag WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTag!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tag]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTag!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Tag.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTag!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TagFilterBuilder

// region TagFields
class TagFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }
}
// endregion TagFields

//region TagManager
class TagManager extends SqfEntityProvider {
  TagManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'tag';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TagManager
// region Contact_detail
class Contact_detail extends TableBase {
  Contact_detail({this.id, this.contactId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Contact_detail.withFields(this.contactId) {
    _setDefaultValues();
  }
  Contact_detail.withId(this.id, this.contactId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Contact_detail.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['contactId'] != null) {
      contactId = o['contactId'].toString();
    }
  }
  // FIELDS (Contact_detail)
  int? id;
  String? contactId;

  // end FIELDS (Contact_detail)

// COLLECTIONS & VIRTUALS (Contact_detail)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContact_detail_tags', 'plField2'..]) or so on..
  List<Contact_detail_tag>? plContact_detail_tags;

  /// get Contact_detail_tag(s) filtered by id=contactDetailId
  Contact_detail_tagFilterBuilder? getContact_detail_tags(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Contact_detail_tag()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .contactDetailId
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContact_detail_relations', 'plField2'..]) or so on..
  List<Contact_detail_relation>? plContact_detail_relations;

  /// get Contact_detail_relation(s) filtered by id=contactDetailId1
  Contact_detail_relationFilterBuilder? getContact_detail_relations(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Contact_detail_relation()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .contactDetailId1
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContact_detail_relationsBycontactDetailId2', 'plField2'..]) or so on..
  List<Contact_detail_relation>? plContact_detail_relationsBycontactDetailId2;

  /// get Contact_detail_relation(s) filtered by id=contactDetailId2
  Contact_detail_relationFilterBuilder?
      getContact_detail_relationsBycontactDetailId2(
          {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Contact_detail_relation()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .contactDetailId2
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Contact_detail)

  static const bool _softDeleteActivated = false;
  Contact_detailManager? __mnContact_detail;

  Contact_detailManager get _mnContact_detail {
    return __mnContact_detail = __mnContact_detail ?? Contact_detailManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (contactId != null || !forView) {
      map['contactId'] = contactId;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (contactId != null || !forView) {
      map['contactId'] = contactId;
    }

// COLLECTIONS (Contact_detail)
    if (!forQuery) {
      map['Contact_detail_tags'] = await getContact_detail_tags()!.toMapList();
    }
    if (!forQuery) {
      map['Contact_detail_relations'] =
          await getContact_detail_relations()!.toMapList();
    }
    if (!forQuery) {
      map['Contact_detail_relations'] =
          await getContact_detail_relations()!.toMapList();
    }
// END COLLECTIONS (Contact_detail)

    return map;
  }

  /// This method returns Json String [Contact_detail]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Contact_detail]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [contactId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, contactId];
  }

  static Future<List<Contact_detail>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Contact_detail.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Contact_detail>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Contact_detail>[];
    try {
      objList = list
          .map((contact_detail) =>
              Contact_detail.fromMap(contact_detail as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Contact_detail.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Contact_detail>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Contact_detail> objList = <Contact_detail>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Contact_detail.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_tags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_tags'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_tags'); */ obj
                  .plContact_detail_tags =
              obj.plContact_detail_tags ??
                  await obj.getContact_detail_tags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_relations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_relations'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_relations'); */ obj
                  .plContact_detail_relations =
              obj.plContact_detail_relations ??
                  await obj.getContact_detail_relations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_relationsBycontactDetailId2') && */ (preloadFields ==
                null ||
            preloadFields
                .contains('plContact_detail_relationsBycontactDetailId2'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_relationsBycontactDetailId2'); */ obj
              .plContact_detail_relationsBycontactDetailId2 = obj
                  .plContact_detail_relationsBycontactDetailId2 ??
              await obj.getContact_detail_relationsBycontactDetailId2()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Contact_detail by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Contact_detail] if exist, otherwise returns null
  Future<Contact_detail?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Contact_detail? obj;
    final data = await _mnContact_detail.getById([id]);
    if (data.length != 0) {
      obj = Contact_detail.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_tags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_tags'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_tags'); */ obj
                  .plContact_detail_tags =
              obj.plContact_detail_tags ??
                  await obj.getContact_detail_tags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_relations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_relations'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_relations'); */ obj
                  .plContact_detail_relations =
              obj.plContact_detail_relations ??
                  await obj.getContact_detail_relations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_relationsBycontactDetailId2') && */ (preloadFields ==
                null ||
            preloadFields
                .contains('plContact_detail_relationsBycontactDetailId2'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_relationsBycontactDetailId2'); */ obj
              .plContact_detail_relationsBycontactDetailId2 = obj
                  .plContact_detail_relationsBycontactDetailId2 ??
              await obj.getContact_detail_relationsBycontactDetailId2()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Contact_detail) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContact_detail.insert(this, ignoreBatch);
    } else {
      await _mnContact_detail.update(this);
    }

    return id;
  }

  /// Saves the (Contact_detail) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContact_detail.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnContact_detail.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Contact_detail. Returns a new Primary Key value of Contact_detail

  /// <returns>Returns a new Primary Key value of Contact_detail
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Contact_detail> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Contact_detail> contact_details,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in contact_details) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < contact_details.length; i++) {
        if (contact_details[i].id == null) {
          contact_details[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContact_detail.rawInsert(
          'INSERT OR REPLACE INTO contact_detail (id, contactId)  VALUES (?,?)',
          [id, contactId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Contact_detail id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Contact_detail id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Contact_detail Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Contact_detail>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Contact_detail> contact_details,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnContact_detail.rawInsertAll(
        'INSERT OR REPLACE INTO contact_detail (id, contactId)  VALUES (?,?)',
        contact_details,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Contact_detail

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Contact_detail invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Contact_detail_tag()
          .select()
          .contactDetailId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await Contact_detail_relation()
          .select()
          .contactDetailId1
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await Contact_detail_relation()
          .select()
          .contactDetailId2
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnContact_detail
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnContact_detail.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Contact_detail] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Contact_detailFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Contact_detailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Contact_detailFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Contact_detailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion contact_detail

// region Contact_detailField
class Contact_detailField extends FilterBase {
  Contact_detailField(Contact_detailFilterBuilder contact_detailFB)
      : super(contact_detailFB);

  @override
  Contact_detailFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder isNull() {
    return super.isNull() as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Contact_detailFilterBuilder;
  }

  @override
  Contact_detailField get not {
    return super.not as Contact_detailField;
  }
}
// endregion Contact_detailField

// region Contact_detailFilterBuilder
class Contact_detailFilterBuilder extends ConjunctionBase {
  Contact_detailFilterBuilder(Contact_detail obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContact_detail = obj._mnContact_detail;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Contact_detailManager? _mnContact_detail;

  /// put the sql keyword 'AND'
  @override
  Contact_detailFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Contact_detailFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Contact_detailFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Contact_detailFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Contact_detailFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Contact_detailFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Contact_detailFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Contact_detailFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Contact_detailFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Contact_detailFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Contact_detailFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Contact_detailField _setField(
      Contact_detailField? field, String colName, DbType dbtype) {
    return Contact_detailField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Contact_detailField? _id;
  Contact_detailField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  Contact_detailField? _contactId;
  Contact_detailField get contactId {
    return _contactId = _setField(_contactId, 'contactId', DbType.text);
  }

  /// Deletes List<Contact_detail> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Contact_detail_tag) according to DeleteRule.CASCADE
    final idListContact_detail_tagBYcontactDetailId =
        toListPrimaryKeySQL(false);
    final resContact_detail_tagBYcontactDetailId = await Contact_detail_tag()
        .select()
        .where(
            'contactDetailId IN (${idListContact_detail_tagBYcontactDetailId['sql']})',
            parameterValue: idListContact_detail_tagBYcontactDetailId['args'])
        .delete(hardDelete);
    if (!resContact_detail_tagBYcontactDetailId.success) {
      return resContact_detail_tagBYcontactDetailId;
    }
// Delete sub records where in (Contact_detail_relation) according to DeleteRule.CASCADE
    final idListContact_detail_relationBYcontactDetailId1 =
        toListPrimaryKeySQL(false);
    final resContact_detail_relationBYcontactDetailId1 =
        await Contact_detail_relation()
            .select()
            .where(
                'contactDetailId1 IN (${idListContact_detail_relationBYcontactDetailId1['sql']})',
                parameterValue:
                    idListContact_detail_relationBYcontactDetailId1['args'])
            .delete(hardDelete);
    if (!resContact_detail_relationBYcontactDetailId1.success) {
      return resContact_detail_relationBYcontactDetailId1;
    }
// Delete sub records where in (Contact_detail_relation) according to DeleteRule.CASCADE
    final idListContact_detail_relationBYcontactDetailId2 =
        toListPrimaryKeySQL(false);
    final resContact_detail_relationBYcontactDetailId2 =
        await Contact_detail_relation()
            .select()
            .where(
                'contactDetailId2 IN (${idListContact_detail_relationBYcontactDetailId2['sql']})',
                parameterValue:
                    idListContact_detail_relationBYcontactDetailId2['args'])
            .delete(hardDelete);
    if (!resContact_detail_relationBYcontactDetailId2.success) {
      return resContact_detail_relationBYcontactDetailId2;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContact_detail!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContact_detail!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from contact_detail ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContact_detail!.updateBatch(qparams, values);
  }

  /// This method always returns [Contact_detail] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Contact_detail?
  @override
  Future<Contact_detail?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContact_detail!.toList(qparams);
    final data = await objFuture;
    Contact_detail? obj;
    if (data.isNotEmpty) {
      obj = Contact_detail.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_tags') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_tags'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_tags'); */ obj
                  .plContact_detail_tags =
              obj.plContact_detail_tags ??
                  await obj.getContact_detail_tags()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_relations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plContact_detail_relations'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_relations'); */ obj
                  .plContact_detail_relations =
              obj.plContact_detail_relations ??
                  await obj.getContact_detail_relations()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('contact_detail.plContact_detail_relationsBycontactDetailId2') && */ (preloadFields ==
                null ||
            preloadFields
                .contains('plContact_detail_relationsBycontactDetailId2'))) {
          /*_loadedfields!.add('contact_detail.plContact_detail_relationsBycontactDetailId2'); */ obj
              .plContact_detail_relationsBycontactDetailId2 = obj
                  .plContact_detail_relationsBycontactDetailId2 ??
              await obj.getContact_detail_relationsBycontactDetailId2()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Contact_detail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Contact_detail?
  @override
  Future<Contact_detail> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Contact_detail();
  }

  /// This method returns int. [Contact_detail]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? contact_detailCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final contact_detailsFuture = await _mnContact_detail!.toList(qparams);
    final int count = contact_detailsFuture[0]['CNT'] as int;
    if (contact_detailCount != null) {
      contact_detailCount(count);
    }
    return count;
  }

  /// This method returns List<Contact_detail> [Contact_detail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Contact_detail>
  @override
  Future<List<Contact_detail>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Contact_detail> contact_detailsData =
        await Contact_detail.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return contact_detailsData;
  }

  /// This method returns Json String [Contact_detail]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Contact_detail]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Contact_detail]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContact_detail!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Contact_detail]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM contact_detail WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnContact_detail!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Contact_detail]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContact_detail!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Contact_detail.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContact_detail!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Contact_detailFilterBuilder

// region Contact_detailFields
class Contact_detailFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fContactId;
  static TableField get contactId {
    return _fContactId = _fContactId ??
        SqlSyntax.setField(_fContactId, 'contactId', DbType.text);
  }
}
// endregion Contact_detailFields

//region Contact_detailManager
class Contact_detailManager extends SqfEntityProvider {
  Contact_detailManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'contact_detail';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion Contact_detailManager
// region Contact_detail_tag
class Contact_detail_tag extends TableBase {
  Contact_detail_tag({this.id, this.contactDetailId, this.tagId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Contact_detail_tag.withFields(this.contactDetailId, this.tagId) {
    _setDefaultValues();
  }
  Contact_detail_tag.withId(this.id, this.contactDetailId, this.tagId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Contact_detail_tag.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    contactDetailId = int.tryParse(o['contactDetailId'].toString());

    tagId = int.tryParse(o['tagId'].toString());

    // RELATIONSHIPS FromMAP
    plContact_detail = o['contact_detail'] != null
        ? Contact_detail.fromMap(o['contact_detail'] as Map<String, dynamic>)
        : null;
    plTag =
        o['tag'] != null ? Tag.fromMap(o['tag'] as Map<String, dynamic>) : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Contact_detail_tag)
  int? id;
  int? contactDetailId;
  int? tagId;

  // end FIELDS (Contact_detail_tag)

// RELATIONSHIPS (Contact_detail_tag)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContact_detail', 'plField2'..]) or so on..
  Contact_detail? plContact_detail;

  /// get Contact_detail By ContactDetailId
  Future<Contact_detail?> getContact_detail(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Contact_detail().getById(contactDetailId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTag', 'plField2'..]) or so on..
  Tag? plTag;

  /// get Tag By TagId
  Future<Tag?> getTag(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Tag()
        .getById(tagId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Contact_detail_tag)

  static const bool _softDeleteActivated = false;
  Contact_detail_tagManager? __mnContact_detail_tag;

  Contact_detail_tagManager get _mnContact_detail_tag {
    return __mnContact_detail_tag =
        __mnContact_detail_tag ?? Contact_detail_tagManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (contactDetailId != null) {
      map['contactDetailId'] = forView
          ? plContact_detail == null
              ? contactDetailId
              : plContact_detail!.contactId
          : contactDetailId;
    } else if (contactDetailId != null || !forView) {
      map['contactDetailId'] = null;
    }
    if (tagId != null) {
      map['tagId'] = forView
          ? plTag == null
              ? tagId
              : plTag!.name
          : tagId;
    } else if (tagId != null || !forView) {
      map['tagId'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (contactDetailId != null) {
      map['contactDetailId'] = forView
          ? plContact_detail == null
              ? contactDetailId
              : plContact_detail!.contactId
          : contactDetailId;
    } else if (contactDetailId != null || !forView) {
      map['contactDetailId'] = null;
    }
    if (tagId != null) {
      map['tagId'] = forView
          ? plTag == null
              ? tagId
              : plTag!.name
          : tagId;
    } else if (tagId != null || !forView) {
      map['tagId'] = null;
    }

    return map;
  }

  /// This method returns Json String [Contact_detail_tag]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Contact_detail_tag]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [contactDetailId, tagId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, contactDetailId, tagId];
  }

  static Future<List<Contact_detail_tag>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Contact_detail_tag.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Contact_detail_tag>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Contact_detail_tag>[];
    try {
      objList = list
          .map((contact_detail_tag) => Contact_detail_tag.fromMap(
              contact_detail_tag as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Contact_detail_tag.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Contact_detail_tag>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Contact_detail_tag> objList = <Contact_detail_tag>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Contact_detail_tag.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detail'))) {
          obj.plContact_detail = obj.plContact_detail ??
              await obj.getContact_detail(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTag'))) {
          obj.plTag = obj.plTag ?? await obj.getTag(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Contact_detail_tag by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Contact_detail_tag] if exist, otherwise returns null
  Future<Contact_detail_tag?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Contact_detail_tag? obj;
    final data = await _mnContact_detail_tag.getById([id]);
    if (data.length != 0) {
      obj = Contact_detail_tag.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detail'))) {
          obj.plContact_detail = obj.plContact_detail ??
              await obj.getContact_detail(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTag'))) {
          obj.plTag = obj.plTag ?? await obj.getTag(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Contact_detail_tag) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContact_detail_tag.insert(this, ignoreBatch);
    } else {
      await _mnContact_detail_tag.update(this);
    }

    return id;
  }

  /// Saves the (Contact_detail_tag) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContact_detail_tag.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnContact_detail_tag.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Contact_detail_tag. Returns a new Primary Key value of Contact_detail_tag

  /// <returns>Returns a new Primary Key value of Contact_detail_tag
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Contact_detail_tag> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Contact_detail_tag> contact_detail_tags,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in contact_detail_tags) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < contact_detail_tags.length; i++) {
        if (contact_detail_tags[i].id == null) {
          contact_detail_tags[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContact_detail_tag.rawInsert(
          'INSERT OR REPLACE INTO contact_detail_tag (id, contactDetailId, tagId)  VALUES (?,?,?)',
          [id, contactDetailId, tagId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Contact_detail_tag id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Contact_detail_tag id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Contact_detail_tag Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Contact_detail_tag>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(
      List<Contact_detail_tag> contact_detail_tags,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    final results = await _mnContact_detail_tag.rawInsertAll(
        'INSERT OR REPLACE INTO contact_detail_tag (id, contactDetailId, tagId)  VALUES (?,?,?)',
        contact_detail_tags,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Contact_detail_tag

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Contact_detail_tag invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnContact_detail_tag
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnContact_detail_tag.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Contact_detail_tag] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Contact_detail_tagFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Contact_detail_tagFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Contact_detail_tagFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Contact_detail_tagFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion contact_detail_tag

// region Contact_detail_tagField
class Contact_detail_tagField extends FilterBase {
  Contact_detail_tagField(Contact_detail_tagFilterBuilder contact_detail_tagFB)
      : super(contact_detail_tagFB);

  @override
  Contact_detail_tagFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder isNull() {
    return super.isNull() as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Contact_detail_tagFilterBuilder;
  }

  @override
  Contact_detail_tagField get not {
    return super.not as Contact_detail_tagField;
  }
}
// endregion Contact_detail_tagField

// region Contact_detail_tagFilterBuilder
class Contact_detail_tagFilterBuilder extends ConjunctionBase {
  Contact_detail_tagFilterBuilder(Contact_detail_tag obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContact_detail_tag = obj._mnContact_detail_tag;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Contact_detail_tagManager? _mnContact_detail_tag;

  /// put the sql keyword 'AND'
  @override
  Contact_detail_tagFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Contact_detail_tagFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Contact_detail_tagFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Contact_detail_tagFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Contact_detail_tagFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Contact_detail_tagFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Contact_detail_tagFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Contact_detail_tagFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Contact_detail_tagFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Contact_detail_tagFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Contact_detail_tagFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Contact_detail_tagField _setField(
      Contact_detail_tagField? field, String colName, DbType dbtype) {
    return Contact_detail_tagField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Contact_detail_tagField? _id;
  Contact_detail_tagField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  Contact_detail_tagField? _contactDetailId;
  Contact_detail_tagField get contactDetailId {
    return _contactDetailId =
        _setField(_contactDetailId, 'contactDetailId', DbType.integer);
  }

  Contact_detail_tagField? _tagId;
  Contact_detail_tagField get tagId {
    return _tagId = _setField(_tagId, 'tagId', DbType.integer);
  }

  /// Deletes List<Contact_detail_tag> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContact_detail_tag!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContact_detail_tag!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from contact_detail_tag ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContact_detail_tag!.updateBatch(qparams, values);
  }

  /// This method always returns [Contact_detail_tag] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Contact_detail_tag?
  @override
  Future<Contact_detail_tag?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContact_detail_tag!.toList(qparams);
    final data = await objFuture;
    Contact_detail_tag? obj;
    if (data.isNotEmpty) {
      obj = Contact_detail_tag.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detail'))) {
          obj.plContact_detail = obj.plContact_detail ??
              await obj.getContact_detail(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTag'))) {
          obj.plTag = obj.plTag ?? await obj.getTag(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Contact_detail_tag]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Contact_detail_tag?
  @override
  Future<Contact_detail_tag> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Contact_detail_tag();
  }

  /// This method returns int. [Contact_detail_tag]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? contact_detail_tagCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final contact_detail_tagsFuture =
        await _mnContact_detail_tag!.toList(qparams);
    final int count = contact_detail_tagsFuture[0]['CNT'] as int;
    if (contact_detail_tagCount != null) {
      contact_detail_tagCount(count);
    }
    return count;
  }

  /// This method returns List<Contact_detail_tag> [Contact_detail_tag]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Contact_detail_tag>
  @override
  Future<List<Contact_detail_tag>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Contact_detail_tag> contact_detail_tagsData =
        await Contact_detail_tag.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return contact_detail_tagsData;
  }

  /// This method returns Json String [Contact_detail_tag]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Contact_detail_tag]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Contact_detail_tag]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContact_detail_tag!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Contact_detail_tag]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM contact_detail_tag WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnContact_detail_tag!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Contact_detail_tag]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContact_detail_tag!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Contact_detail_tag.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContact_detail_tag!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Contact_detail_tagFilterBuilder

// region Contact_detail_tagFields
class Contact_detail_tagFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fContactDetailId;
  static TableField get contactDetailId {
    return _fContactDetailId = _fContactDetailId ??
        SqlSyntax.setField(
            _fContactDetailId, 'contactDetailId', DbType.integer);
  }

  static TableField? _fTagId;
  static TableField get tagId {
    return _fTagId =
        _fTagId ?? SqlSyntax.setField(_fTagId, 'tagId', DbType.integer);
  }
}
// endregion Contact_detail_tagFields

//region Contact_detail_tagManager
class Contact_detail_tagManager extends SqfEntityProvider {
  Contact_detail_tagManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'contact_detail_tag';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion Contact_detail_tagManager
// region Contact_detail_relation
class Contact_detail_relation extends TableBase {
  Contact_detail_relation(
      {this.id,
      this.relationName,
      this.contactDetailId1,
      this.contactDetailId2}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Contact_detail_relation.withFields(
      this.relationName, this.contactDetailId1, this.contactDetailId2) {
    _setDefaultValues();
  }
  Contact_detail_relation.withId(this.id, this.relationName,
      this.contactDetailId1, this.contactDetailId2) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Contact_detail_relation.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['relationName'] != null) {
      relationName = o['relationName'].toString();
    }
    contactDetailId1 = int.tryParse(o['contactDetailId1'].toString());

    contactDetailId2 = int.tryParse(o['contactDetailId2'].toString());

    // RELATIONSHIPS FromMAP
    plContact_detail = o['contact_detail'] != null
        ? Contact_detail.fromMap(o['contact_detail'] as Map<String, dynamic>)
        : null;
    plContact_detailByContactDetailId2 = o['contact_detail'] != null
        ? Contact_detail.fromMap(o['contact_detail'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Contact_detail_relation)
  int? id;
  String? relationName;
  int? contactDetailId1;
  int? contactDetailId2;

  // end FIELDS (Contact_detail_relation)

// RELATIONSHIPS (Contact_detail_relation)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContact_detail', 'plField2'..]) or so on..
  Contact_detail? plContact_detail;

  /// get Contact_detail By ContactDetailId1
  Future<Contact_detail?> getContact_detail(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Contact_detail().getById(contactDetailId1,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContact_detailByContactDetailId2', 'plField2'..]) or so on..
  Contact_detail? plContact_detailByContactDetailId2;

  /// get Contact_detail By ContactDetailId2
  Future<Contact_detail?> getContact_detailByContactDetailId2(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Contact_detail().getById(contactDetailId2,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Contact_detail_relation)

  static const bool _softDeleteActivated = false;
  Contact_detail_relationManager? __mnContact_detail_relation;

  Contact_detail_relationManager get _mnContact_detail_relation {
    return __mnContact_detail_relation =
        __mnContact_detail_relation ?? Contact_detail_relationManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (relationName != null || !forView) {
      map['relationName'] = relationName;
    }
    if (contactDetailId1 != null) {
      map['contactDetailId1'] = forView
          ? plContact_detail == null
              ? contactDetailId1
              : plContact_detail!.contactId
          : contactDetailId1;
    } else if (contactDetailId1 != null || !forView) {
      map['contactDetailId1'] = null;
    }
    if (contactDetailId2 != null) {
      map['contactDetailId2'] = forView
          ? plContact_detail == null
              ? contactDetailId2
              : plContact_detail!.contactId
          : contactDetailId2;
    } else if (contactDetailId2 != null || !forView) {
      map['contactDetailId2'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (relationName != null || !forView) {
      map['relationName'] = relationName;
    }
    if (contactDetailId1 != null) {
      map['contactDetailId1'] = forView
          ? plContact_detail == null
              ? contactDetailId1
              : plContact_detail!.contactId
          : contactDetailId1;
    } else if (contactDetailId1 != null || !forView) {
      map['contactDetailId1'] = null;
    }
    if (contactDetailId2 != null) {
      map['contactDetailId2'] = forView
          ? plContact_detail == null
              ? contactDetailId2
              : plContact_detail!.contactId
          : contactDetailId2;
    } else if (contactDetailId2 != null || !forView) {
      map['contactDetailId2'] = null;
    }

    return map;
  }

  /// This method returns Json String [Contact_detail_relation]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Contact_detail_relation]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [relationName, contactDetailId1, contactDetailId2];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, relationName, contactDetailId1, contactDetailId2];
  }

  static Future<List<Contact_detail_relation>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Contact_detail_relation.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Contact_detail_relation>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Contact_detail_relation>[];
    try {
      objList = list
          .map((contact_detail_relation) => Contact_detail_relation.fromMap(
              contact_detail_relation as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Contact_detail_relation.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Contact_detail_relation>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Contact_detail_relation> objList = <Contact_detail_relation>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Contact_detail_relation.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detail'))) {
          obj.plContact_detail = obj.plContact_detail ??
              await obj.getContact_detail(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detailByContactDetailId2'))) {
          obj.plContact_detailByContactDetailId2 =
              obj.plContact_detailByContactDetailId2 ??
                  await obj.getContact_detailByContactDetailId2(
                      loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Contact_detail_relation by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Contact_detail_relation] if exist, otherwise returns null
  Future<Contact_detail_relation?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Contact_detail_relation? obj;
    final data = await _mnContact_detail_relation.getById([id]);
    if (data.length != 0) {
      obj = Contact_detail_relation.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detail'))) {
          obj.plContact_detail = obj.plContact_detail ??
              await obj.getContact_detail(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detailByContactDetailId2'))) {
          obj.plContact_detailByContactDetailId2 =
              obj.plContact_detailByContactDetailId2 ??
                  await obj.getContact_detailByContactDetailId2(
                      loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Contact_detail_relation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContact_detail_relation.insert(this, ignoreBatch);
    } else {
      await _mnContact_detail_relation.update(this);
    }

    return id;
  }

  /// Saves the (Contact_detail_relation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnContact_detail_relation.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnContact_detail_relation.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Contact_detail_relation. Returns a new Primary Key value of Contact_detail_relation

  /// <returns>Returns a new Primary Key value of Contact_detail_relation
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Contact_detail_relation> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Contact_detail_relation> contact_detail_relations,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Connect2DB().batchStart();
    for (final obj in contact_detail_relations) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Connect2DB().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < contact_detail_relations.length; i++) {
        if (contact_detail_relations[i].id == null) {
          contact_detail_relations[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContact_detail_relation.rawInsert(
          'INSERT OR REPLACE INTO contact_detail_relation (id, relationName, contactDetailId1, contactDetailId2)  VALUES (?,?,?,?)',
          [id, relationName, contactDetailId1, contactDetailId2],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Contact_detail_relation id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Contact_detail_relation id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Contact_detail_relation Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Contact_detail_relation>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(
      List<Contact_detail_relation> contact_detail_relations,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    final results = await _mnContact_detail_relation.rawInsertAll(
        'INSERT OR REPLACE INTO contact_detail_relation (id, relationName, contactDetailId1, contactDetailId2)  VALUES (?,?,?,?)',
        contact_detail_relations,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Contact_detail_relation

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Contact_detail_relation invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnContact_detail_relation
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnContact_detail_relation.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Contact_detail_relation] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Contact_detail_relationFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Contact_detail_relationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Contact_detail_relationFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Contact_detail_relationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion contact_detail_relation

// region Contact_detail_relationField
class Contact_detail_relationField extends FilterBase {
  Contact_detail_relationField(
      Contact_detail_relationFilterBuilder contact_detail_relationFB)
      : super(contact_detail_relationFB);

  @override
  Contact_detail_relationFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder isNull() {
    return super.isNull() as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue)
        as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue)
        as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Contact_detail_relationFilterBuilder;
  }

  @override
  Contact_detail_relationField get not {
    return super.not as Contact_detail_relationField;
  }
}
// endregion Contact_detail_relationField

// region Contact_detail_relationFilterBuilder
class Contact_detail_relationFilterBuilder extends ConjunctionBase {
  Contact_detail_relationFilterBuilder(
      Contact_detail_relation obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContact_detail_relation = obj._mnContact_detail_relation;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Contact_detail_relationManager? _mnContact_detail_relation;

  /// put the sql keyword 'AND'
  @override
  Contact_detail_relationFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Contact_detail_relationFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Contact_detail_relationFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Contact_detail_relationFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Contact_detail_relationFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Contact_detail_relationFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Contact_detail_relationFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Contact_detail_relationFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Contact_detail_relationFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Contact_detail_relationFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Contact_detail_relationFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Contact_detail_relationField _setField(
      Contact_detail_relationField? field, String colName, DbType dbtype) {
    return Contact_detail_relationField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Contact_detail_relationField? _id;
  Contact_detail_relationField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  Contact_detail_relationField? _relationName;
  Contact_detail_relationField get relationName {
    return _relationName =
        _setField(_relationName, 'relationName', DbType.text);
  }

  Contact_detail_relationField? _contactDetailId1;
  Contact_detail_relationField get contactDetailId1 {
    return _contactDetailId1 =
        _setField(_contactDetailId1, 'contactDetailId1', DbType.integer);
  }

  Contact_detail_relationField? _contactDetailId2;
  Contact_detail_relationField get contactDetailId2 {
    return _contactDetailId2 =
        _setField(_contactDetailId2, 'contactDetailId2', DbType.integer);
  }

  /// Deletes List<Contact_detail_relation> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContact_detail_relation!
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContact_detail_relation!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from contact_detail_relation ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContact_detail_relation!.updateBatch(qparams, values);
  }

  /// This method always returns [Contact_detail_relation] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Contact_detail_relation?
  @override
  Future<Contact_detail_relation?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContact_detail_relation!.toList(qparams);
    final data = await objFuture;
    Contact_detail_relation? obj;
    if (data.isNotEmpty) {
      obj = Contact_detail_relation.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detail'))) {
          obj.plContact_detail = obj.plContact_detail ??
              await obj.getContact_detail(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContact_detailByContactDetailId2'))) {
          obj.plContact_detailByContactDetailId2 =
              obj.plContact_detailByContactDetailId2 ??
                  await obj.getContact_detailByContactDetailId2(
                      loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Contact_detail_relation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Contact_detail_relation?
  @override
  Future<Contact_detail_relation> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Contact_detail_relation();
  }

  /// This method returns int. [Contact_detail_relation]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? contact_detail_relationCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final contact_detail_relationsFuture =
        await _mnContact_detail_relation!.toList(qparams);
    final int count = contact_detail_relationsFuture[0]['CNT'] as int;
    if (contact_detail_relationCount != null) {
      contact_detail_relationCount(count);
    }
    return count;
  }

  /// This method returns List<Contact_detail_relation> [Contact_detail_relation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Contact_detail_relation>
  @override
  Future<List<Contact_detail_relation>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Contact_detail_relation> contact_detail_relationsData =
        await Contact_detail_relation.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return contact_detail_relationsData;
  }

  /// This method returns Json String [Contact_detail_relation]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Contact_detail_relation]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Contact_detail_relation]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContact_detail_relation!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Contact_detail_relation]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM contact_detail_relation WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnContact_detail_relation!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Contact_detail_relation]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContact_detail_relation!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Contact_detail_relation.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContact_detail_relation!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Contact_detail_relationFilterBuilder

// region Contact_detail_relationFields
class Contact_detail_relationFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fRelationName;
  static TableField get relationName {
    return _fRelationName = _fRelationName ??
        SqlSyntax.setField(_fRelationName, 'relationName', DbType.text);
  }

  static TableField? _fContactDetailId1;
  static TableField get contactDetailId1 {
    return _fContactDetailId1 = _fContactDetailId1 ??
        SqlSyntax.setField(
            _fContactDetailId1, 'contactDetailId1', DbType.integer);
  }

  static TableField? _fContactDetailId2;
  static TableField get contactDetailId2 {
    return _fContactDetailId2 = _fContactDetailId2 ??
        SqlSyntax.setField(
            _fContactDetailId2, 'contactDetailId2', DbType.integer);
  }
}
// endregion Contact_detail_relationFields

//region Contact_detail_relationManager
class Contact_detail_relationManager extends SqfEntityProvider {
  Contact_detail_relationManager()
      : super(Connect2DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'contact_detail_relation';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion Contact_detail_relationManager
class Connect2DBSequenceManager extends SqfEntityProvider {
  Connect2DBSequenceManager() : super(Connect2DB());
}
// END OF ENTITIES
